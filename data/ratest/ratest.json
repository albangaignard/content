{
    "additionDate": "2019-11-14T18:15:20Z",
    "biotoolsCURIE": "biotools:RATEST",
    "biotoolsID": "RATEST",
    "confidence_flag": "high",
    "description": "> HOMEPAGE MISSING! | Explaining Wrong Relational Queries Using Small Examples | We present a system called RATEST, designed to help debug relational queries against reference queries and test database instances. In many applications, e.g., classroom learning and regression testing, we test the correctness of a user query Q by evaluating it over a test database instance D and comparing its result with that of evaluating a reference (correct) query Q 0 over D. If Q(D) differs from Q 0(D), the user knows Q is incorrect. However, D can be large (often by design), which makes debugging Q difficult. The key idea behind RATEST is to show the user a much smaller database instance D' \u2286 D, which we call a counterexample, such that Q(D') \u2260 Q 0(D'). RATEST builds on data provenance and constraint solving, and employs a suite of techniques to support, at interactive speed, complex queries involving differences and group-by aggregation",
    "editPermission": {
        "type": "public"
    },
    "function": [
        {
            "operation": [
                {
                    "term": "Query and retrieval",
                    "uri": "http://edamontology.org/operation_0224"
                },
                {
                    "term": "Aggregation",
                    "uri": "http://edamontology.org/operation_3436"
                }
            ]
        }
    ],
    "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31388247",
    "lastUpdate": "2019-11-14T18:15:20Z",
    "name": "RATEST",
    "owner": "Pub2Tools",
    "publication": [
        {
            "doi": "10.1145/3299869.3320236",
            "metadata": {
                "abstract": "\u00a9 2019 Association for Computing Machinery.We present a system called RATest, designed to help debug relational queries against reference queries and test database instances. In many applications, e.g., classroom learning and regression testing, we test the correctness of a user query Q by evaluating it over a test database instance D and comparing its result with that of evaluating a reference (correct) query Q0 over D. If Q(D) differs from Q0(D), the user knows Q is incorrect. However, D can be large (often by design), which makes debugging Q difficult. The key idea behind RATest is to show the user a much smaller database instance D\u2032 \u2286 D, which we call a counterexample, such that Q(D\u2032), Q0(D\u2032). RATest builds on data provenance and constraint solving, and employs a suite of techniques to support, at interactive speed, complex queries involving differences and group-by aggregation. We demonstrate an application of RATest in learning: it has been used successfully by a large undergraduate database course in a university to help students with a relational algebra assignment.",
                "authors": [
                    {
                        "name": "Miao Z."
                    },
                    {
                        "name": "Roy S."
                    },
                    {
                        "name": "Yang J."
                    }
                ],
                "date": "2019-06-25T00:00:00Z",
                "journal": "Proceedings of the ACM SIGMOD International Conference on Management of Data",
                "title": "RatesT: Explaining wrong relational queries using small examples"
            },
            "pmcid": "PMC6684020",
            "pmid": "31388247"
        }
    ],
    "topic": [
        {
            "term": "Data submission, annotation and curation",
            "uri": "http://edamontology.org/topic_0219"
        }
    ]
}